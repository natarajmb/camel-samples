<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">


    <!-- We are defining a Proxy service below which connects to an external service. This endpoint provides an virtual
         proxy object which the calling client could utilise for making calls. This is also known as "PRODUCER" in
         camel.
    -->
    <cxf:cxfEndpoint id="customerProxyServiceEndpoint" address="http://localhost:12912/Customer"
                     serviceClass="com.cognitivenode.customer.ICustomerService"
                     endpointName="s:CustomerServicePort"
                     wsdlURL="http://localhost:12912/Customer?wsdl"
                     serviceName="s:CustomerService"
                     xmlns:s="http://www.cognitivenode.com/customer">
        <cxf:properties>
            <entry key="dataFormat" value="POJO"/>
            <entry key="wrapped" value="true"/>
            <entry key="defaultOperationNameSpace" value="http://www.cognitivenode.com/customer/types"/>
        </cxf:properties>
    </cxf:cxfEndpoint>

    <!-- When spring process the below piece of code it automatically starts up all the routes
         defined with in the context. There is a alternative way of doing this by defining
         the camel bean and invoking it and starting it manually. Read the starter guide to
         grips - http://camel.apache.org/getting-started.html
    -->
    <camel:camelContext id="camel">
        <camel:route>
            <!-- 'callCSProxy' string is used an identifier with in the code -->
            <camel:from uri="direct:callCSProxy"/>
            <camel:setExchangePattern pattern="InOut"/>
            <camel:to uri="cxf:bean:customerProxyServiceEndpoint"/>
        </camel:route>
    </camel:camelContext>

</beans>